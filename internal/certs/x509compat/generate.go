//go:build ignore

package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"fmt"
	"log"
	"net"
	"os"
	"time"
)

func main() {
	priv, err := rsa.GenerateKey(rand.Reader, 1024)
	if err != nil {
		log.Fatal(err)
	}

	nb := time.Now()
	na := nb.Add(10 * 365 * 24 * time.Hour)
	reqMalformed := x509.Certificate{
		Subject: pkix.Name{
			CommonName: "localhost",
		},
		NotBefore:   nb,
		NotAfter:    na,
		IsCA:        true,
		KeyUsage:    x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
		ExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		DNSNames:    []string{""},
	}
	reqWellFormed := x509.Certificate{
		Subject: pkix.Name{
			CommonName: "localhost",
		},
		IsCA:        true,
		NotBefore:   nb,
		NotAfter:    na,
		KeyUsage:    x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
		ExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		DNSNames:    []string{"localhost"},
		IPAddresses: []net.IP{net.ParseIP("127.0.0.1"), net.ParseIP("::1")},
	}

	derMalformed, err := x509.CreateCertificate(rand.Reader, &reqMalformed, &reqMalformed, &priv.PublicKey, priv)
	if err != nil {
		log.Fatalf("failed to create malformed certificate: %s", err)
	}
	derWellFormed, err := x509.CreateCertificate(rand.Reader, &reqWellFormed, &reqWellFormed, &priv.PublicKey, priv)
	if err != nil {
		log.Fatalf("failed to create well formed certificate: %s", err)
	}
	fmt.Println("// generated by internal/certs/x509compat")
	fmt.Println("// go run generate.go")
	fmt.Println("var (")
	fmt.Print("FixturePrivateKey = []byte(`")
	pem.Encode(os.Stdout, &pem.Block{Type: "RSA PRIVATE KEY", Bytes: x509.MarshalPKCS1PrivateKey(priv)})
	fmt.Println("`)")
	fmt.Print("FixtureCertMalformed = []byte(`")
	pem.Encode(os.Stdout, &pem.Block{Type: "CERTIFICATE", Bytes: derMalformed})
	fmt.Println("`)")
	fmt.Print("FixtureCertOK = []byte(`")
	pem.Encode(os.Stdout, &pem.Block{Type: "CERTIFICATE", Bytes: derWellFormed})
	fmt.Println("`)")
	fmt.Println(")")
}
