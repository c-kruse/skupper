package x509compat

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestCertPoolFromPEM(t *testing.T) {
	t.Run("malformed single cert", func(t *testing.T) {
		_, err := CertPoolFromPEM(FixtureCertMalformed)
		if err == nil {
			t.Errorf("expected error loading malformed cert into pool")
		}
	})
	t.Run("malformed compound cert", func(t *testing.T) {
		var buf bytes.Buffer
		buf.Write(FixtureCertOK)
		fmt.Fprint(&buf, "\n")
		buf.Write(FixtureCertMalformed)
		_, err := CertPoolFromPEM(buf.Bytes())
		if err == nil {
			t.Errorf("expected error loading malformed cert into pool with multiples")
		}
	})

	t.Run("working cert pool", func(t *testing.T) {
		pool, err := CertPoolFromPEM(FixtureCertOK)
		if err != nil {
			t.Fatalf("unexpected error getting cert pool: %s", err)
		}
		tlsCert, err := tls.X509KeyPair(FixtureCertOK, FixturePrivateKey)
		if err != nil {
			t.Fatalf("unexpected error loading key pair: %s", err)
		}
		tlsCfg := &tls.Config{
			RootCAs:      pool,
			ClientAuth:   tls.RequireAndVerifyClientCert,
			ClientCAs:    pool,
			Certificates: []tls.Certificate{tlsCert},
		}
		srv := httptest.NewUnstartedServer(
			http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {
				rw.WriteHeader(201)
			}))
		srv.TLS = tlsCfg
		srv.StartTLS()
		client := http.Client{
			Transport: &http.Transport{
				TLSClientConfig: tlsCfg,
			},
		}
		resp, err := client.Get(srv.URL)
		if err != nil {
			t.Fatalf("http request error: %s", err)
		}
		if resp.StatusCode != 201 {
			t.Fatalf("expected status code 201 but got: %q", resp.Status)
		}
	})
}

// generated by internal/certs/x509compat
// go run generate.go
var (
	FixturePrivateKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQDEJntm9D48j+4suUjZZ9Sdf3O6nljK//dpEX859FSpUYWtUbg+
/3EDX/ixpu4mEJIabcus/wZpXL0GHpPmhrXXjFyqpsoOHDSTpClc20q1gXOx75tX
IgrMuNDi421qLRG0u95B2BQr3Nt3u+3NPxm/+ofhRPCSOGrEM5W/U/e5RQIDAQAB
AoGAKE/0WqNlyxKVk5F83FmPg9L22OrEOuxCT9Ctwh5p6+Z6P7Wk1SWwd04ZEYHK
Pf532ICqNGKxUaQioQhVwzH6Wvc9FkzGNI1x88Zt7koOPHTgOdXve+XRn9+K5Xip
t4S/k/jdEHK0CnhXMSmqinFQZiKJXCWE4OEDIDxfD77JksECQQDfkAjcsSHpYfht
fc8OrD297rVpsRAjv+ovNDJ/wpUXpxhPmgNhrx/TqV8Mq8GA4Za91m40BfrQQuUm
xTGVpyLVAkEA4Jw/++xO1JjqxJkalNzWeLcrWjGhnG/DekJU0ujPOIUS02Bxofey
3mFWWEBaKsTlf66awRGzEETjwRYxEfAUsQJAcG2A52t1AGcyhe2k+V4JVsD7HoHa
+f+Dh+WaF8IFNHXltfJgDPoC6XDdygN+NpA8PI/fr+3p6l4Z21uDyhzZWQJAUYpn
8B0pwSSCljy+2awScGCO7H94HEK2xHuwL6E1GV+2JeatWg+CcBkGL6OtGDnC10ec
BttWFmHsDPzxc4GlAQJATDyOYQ8gggkIZZCb6QOFojP/XcGHrLOW/O7F+ch+Mv1z
+ZqpeT5hRcZ1eF6jk8RRpIahSzD8EjRkwdrMADCqYw==
-----END RSA PRIVATE KEY-----
`)
	FixtureCertMalformed = []byte(`-----BEGIN CERTIFICATE-----
MIICADCCAWmgAwIBAgIUa9DTHni3OGE9OswAjlEGcbvk38gwDQYJKoZIhvcNAQEL
BQAwFDESMBAGA1UEAxMJbG9jYWxob3N0MB4XDTI1MTAxMzIwMjgxNloXDTM1MTAx
MTIwMjgxNlowFDESMBAGA1UEAxMJbG9jYWxob3N0MIGfMA0GCSqGSIb3DQEBAQUA
A4GNADCBiQKBgQDEJntm9D48j+4suUjZZ9Sdf3O6nljK//dpEX859FSpUYWtUbg+
/3EDX/ixpu4mEJIabcus/wZpXL0GHpPmhrXXjFyqpsoOHDSTpClc20q1gXOx75tX
IgrMuNDi421qLRG0u95B2BQr3Nt3u+3NPxm/+ofhRPCSOGrEM5W/U/e5RQIDAQAB
o08wTTAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0lBAgwBgYEVR0lADAdBgNVHQ4EFgQU
rbYfZlWOJdeye9Vrk+FT8ZAWrjkwCwYDVR0RBAQwAoIAMA0GCSqGSIb3DQEBCwUA
A4GBAItki1HSgTNsXVq+/eMfBDxNn+PDMtURo/RRdzq0vWS9xN9BjT+xTQlu8Wup
snYI8TxbFUK1lh7z5jAczQM0XbUrOqBqCTemBfhdOw+QQc85uLkbRRaltC2gTza5
Fmz1Aafred+V3+pVyGZRo+39dAOuIuGc28+5giyjYNp37N3m
-----END CERTIFICATE-----
`)
	FixtureCertOK = []byte(`-----BEGIN CERTIFICATE-----
MIICITCCAYqgAwIBAgIUWLdqHOsVxEiIpMX2T/dF2Wblz2MwDQYJKoZIhvcNAQEL
BQAwFDESMBAGA1UEAxMJbG9jYWxob3N0MB4XDTI1MTAxMzIwMjgxNloXDTM1MTAx
MTIwMjgxNlowFDESMBAGA1UEAxMJbG9jYWxob3N0MIGfMA0GCSqGSIb3DQEBAQUA
A4GNADCBiQKBgQDEJntm9D48j+4suUjZZ9Sdf3O6nljK//dpEX859FSpUYWtUbg+
/3EDX/ixpu4mEJIabcus/wZpXL0GHpPmhrXXjFyqpsoOHDSTpClc20q1gXOx75tX
IgrMuNDi421qLRG0u95B2BQr3Nt3u+3NPxm/+ofhRPCSOGrEM5W/U/e5RQIDAQAB
o3AwbjAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0lBAgwBgYEVR0lADAdBgNVHQ4EFgQU
rbYfZlWOJdeye9Vrk+FT8ZAWrjkwLAYDVR0RBCUwI4IJbG9jYWxob3N0hwR/AAAB
hxAAAAAAAAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUAA4GBAFFe540FWqgvjW3z
7pEStHYBp3fUARm8nwyC5tnXGO5VR2+2lCOM367HesNWFrwMCfagrotAy2KZznWj
8kp6oWO9/Yr5lFBDVfp30pKGXu1b7uQn+uKc1QFHiE4HXMVlFpOyzSCWyY45pv7q
jInt92McFQsJk3cGsoLEjejReBNF
-----END CERTIFICATE-----
`)
)
