// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Defines values for FlowAggregatePairType.
const (
	FlowAggregatePairTypePROCESS      FlowAggregatePairType = "PROCESS"
	FlowAggregatePairTypePROCESSGROUP FlowAggregatePairType = "PROCESS_GROUP"
	FlowAggregatePairTypeSITE         FlowAggregatePairType = "SITE"
)

// Defines values for OperStatusType.
const (
	OperStatusTypeDown OperStatusType = "down"
	OperStatusTypeUp   OperStatusType = "up"
)

// AddressListResponse defines model for AddressListResponse.
type AddressListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []AddressRecord `json:"results"`
}

// AddressRecord defines model for AddressRecord.
type AddressRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ConnectorCount int    `json:"connectorCount"`
	ListenerCount  int    `json:"listenerCount"`
	Name           string `json:"name"`
	Protocol       string `json:"protocol"`
}

// AddressResponse defines model for AddressResponse.
type AddressResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *AddressRecord `json:"results,omitempty"`
}

// ConnectorListResponse defines model for ConnectorListResponse.
type ConnectorListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []ConnectorRecord `json:"results"`
}

// ConnectorRecord defines model for ConnectorRecord.
type ConnectorRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Address   string  `json:"address"`
	AddressId *string `json:"addressId,omitempty"`
	DestHost  string  `json:"destHost"`
	DestPort  string  `json:"destPort"`
	Name      string  `json:"name"`
	ProcessId string  `json:"processId"`
	Protocol  string  `json:"protocol"`
	Target    string  `json:"target"`
}

// ConnectorResponse defines model for ConnectorResponse.
type ConnectorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *ConnectorRecord `json:"results,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Status string `json:"status"`
}

// FlowAggregateListResponse defines model for FlowAggregateListResponse.
type FlowAggregateListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []FlowAggregateRecord `json:"results"`
}

// FlowAggregateRecord defines model for FlowAggregateRecord.
type FlowAggregateRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DestinationId       string                `json:"destinationId"`
	DestinationName     string                `json:"destinationName"`
	DestinationSiteId   *string               `json:"destinationSiteId,omitempty"`
	DestinationSiteName *string               `json:"destinationSiteName,omitempty"`
	PairType            FlowAggregatePairType `json:"pairType"`
	Protocol            string                `json:"protocol"`
	RecordCount         uint64                `json:"recordCount"`
	SourceId            string                `json:"sourceId"`
	SourceName          string                `json:"sourceName"`
	SourceSiteId        *string               `json:"sourceSiteId,omitempty"`
	SourceSiteName      *string               `json:"sourceSiteName,omitempty"`
}

// FlowAggregateResponse defines model for FlowAggregateResponse.
type FlowAggregateResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *FlowAggregateRecord `json:"results,omitempty"`
}

// LinkListResponse defines model for LinkListResponse.
type LinkListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []LinkRecord `json:"results"`
}

// LinkRecord defines model for LinkRecord.
type LinkRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DestinationSiteId string `json:"destinationSiteId"`
	Direction         string `json:"direction"`
	LinkCost          uint64 `json:"linkCost"`
	Mode              string `json:"mode"`
	Name              string `json:"name"`
	SourceSiteId      string `json:"sourceSiteId"`
}

// LinkResponse defines model for LinkResponse.
type LinkResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *LinkRecord `json:"results,omitempty"`
}

// ListenerListResponse defines model for ListenerListResponse.
type ListenerListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []ListenerRecord `json:"results"`
}

// ListenerRecord defines model for ListenerRecord.
type ListenerRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Address   string  `json:"address"`
	AddressId *string `json:"addressId,omitempty"`
	DestHost  string  `json:"destHost"`
	DestPort  string  `json:"destPort"`
	Name      string  `json:"name"`
	Protocol  string  `json:"protocol"`
}

// ListenerResponse defines model for ListenerResponse.
type ListenerResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *ListenerRecord `json:"results,omitempty"`
}

// ProcessGroupListResponse defines model for ProcessGroupListResponse.
type ProcessGroupListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []ProcessGroupRecord `json:"results"`
}

// ProcessGroupRecord defines model for ProcessGroupRecord.
type ProcessGroupRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Name             string `json:"name"`
	ProcessCount     int    `json:"processCount"`
	ProcessGroupRole string `json:"processGroupRole"`
}

// ProcessGroupResponse defines model for ProcessGroupResponse.
type ProcessGroupResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *ProcessGroupRecord `json:"results,omitempty"`
}

// ProcessListResponse defines model for ProcessListResponse.
type ProcessListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []ProcessRecord `json:"results"`
}

// ProcessRecord defines model for ProcessRecord.
type ProcessRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Addresses      *[]string `json:"addresses,omitempty"`
	GroupIdentity  *string   `json:"groupIdentity,omitempty"`
	GroupName      *string   `json:"groupName,omitempty"`
	HostName       *string   `json:"hostName,omitempty"`
	Image          *string   `json:"image,omitempty"`
	ImageName      *string   `json:"imageName,omitempty"`
	Name           *string   `json:"name,omitempty"`
	ParentName     *string   `json:"parentName,omitempty"`
	ProcessBinding *string   `json:"processBinding,omitempty"`
	ProcessRole    *string   `json:"processRole,omitempty"`
	SourceHost     *string   `json:"sourceHost,omitempty"`
}

// ProcessResponse defines model for ProcessResponse.
type ProcessResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *ProcessRecord `json:"results,omitempty"`
}

// RouterAccessListResponse defines model for RouterAccessListResponse.
type RouterAccessListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []RouterAccessRecord `json:"results"`
}

// RouterAccessRecord defines model for RouterAccessRecord.
type RouterAccessRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	LinkCount uint64 `json:"linkCount"`
	Name      string `json:"name"`
	Role      string `json:"role"`
}

// RouterAccessResponse defines model for RouterAccessResponse.
type RouterAccessResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *RouterAccessRecord `json:"results,omitempty"`
}

// RouterLinkListResponse defines model for RouterLinkListResponse.
type RouterLinkListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []RouterLinkRecord `json:"results"`
}

// RouterLinkRecord defines model for RouterLinkRecord.
type RouterLinkRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DestinationSiteId string         `json:"destinationSiteId"`
	LinkCost          uint64         `json:"linkCost"`
	Name              string         `json:"name"`
	Octets            uint64         `json:"octets"`
	OctetsReverse     uint64         `json:"octetsReverse"`
	Peer              string         `json:"peer"`
	Role              string         `json:"role"`
	SourceSiteId      string         `json:"sourceSiteId"`
	Status            OperStatusType `json:"status"`
}

// RouterLinkResponse defines model for RouterLinkResponse.
type RouterLinkResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *RouterLinkRecord `json:"results,omitempty"`
}

// RouterListResponse defines model for RouterListResponse.
type RouterListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []RouterRecord `json:"results"`
}

// RouterRecord defines model for RouterRecord.
type RouterRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BuildVersion string  `json:"buildVersion"`
	HostName     string  `json:"hostName"`
	ImageName    string  `json:"imageName"`
	ImageVersion string  `json:"imageVersion"`
	Mode         string  `json:"mode"`
	Name         string  `json:"name"`
	Namespace    *string `json:"namespace,omitempty"`
}

// RouterResponse defines model for RouterResponse.
type RouterResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *RouterRecord `json:"results,omitempty"`
}

// SiteListResponse defines model for SiteListResponse.
type SiteListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []SiteRecord `json:"results"`
}

// SiteRecord defines model for SiteRecord.
type SiteRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Location    string `json:"location"`
	Name        string `json:"name"`
	NameSpace   string `json:"nameSpace"`
	Platform    string `json:"platform"`
	Policy      string `json:"policy"`
	Provider    string `json:"provider"`
	SiteVersion string `json:"siteVersion"`
}

// SiteResponse defines model for SiteResponse.
type SiteResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *SiteRecord `json:"results,omitempty"`
}

// TransportFlowListResponse defines model for TransportFlowListResponse.
type TransportFlowListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []TransportFlowRecord `json:"results"`
}

// TransportFlowRecord defines model for TransportFlowRecord.
type TransportFlowRecord struct {
	// Embedded struct due to allOf(#/components/schemas/baseRecord)
	BaseRecord `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DestHost           string  `json:"destHost"`
	DestPort           string  `json:"destPort"`
	DestProcessId      string  `json:"destProcessId"`
	DestProcessName    string  `json:"destProcessName"`
	DestSiteId         string  `json:"destSiteId"`
	DestSiteName       string  `json:"destSiteName"`
	Duration           *uint64 `json:"duration,omitempty"`
	FlowTrace          string  `json:"flowTrace"`
	Latency            uint64  `json:"latency"`
	LatencyReverse     uint64  `json:"latencyReverse"`
	Octets             uint64  `json:"octets"`
	OctetsReverse      uint64  `json:"octetsReverse"`
	ProcessGroupPairId string  `json:"processGroupPairId"`
	ProcessPairId      string  `json:"processPairId"`
	Protocol           string  `json:"protocol"`
	SitePairId         string  `json:"sitePairId"`
	SourceHost         string  `json:"sourceHost"`
	SourcePort         string  `json:"sourcePort"`
	SourceProcessId    string  `json:"sourceProcessId"`
	SourceProcessName  string  `json:"sourceProcessName"`
	SourceSiteId       string  `json:"sourceSiteId"`
	SourceSiteName     string  `json:"sourceSiteName"`
}

// TransportFlowResponse defines model for TransportFlowResponse.
type TransportFlowResponse struct {
	// Embedded struct due to allOf(#/components/schemas/baseResponse)
	BaseResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results *TransportFlowRecord `json:"results,omitempty"`
}

// BaseRecord defines model for baseRecord.
type BaseRecord struct {
	EndTime   uint64  `json:"endTime"`
	Identity  string  `json:"identity"`
	Parent    string  `json:"parent"`
	Source    *string `json:"source,omitempty"`
	StartTime uint64  `json:"startTime"`
}

// BaseResponse defines model for baseResponse.
type BaseResponse struct {
	// Count todo
	Count int64 `json:"count"`

	// Status todo
	Status string `json:"status"`

	// TimeRangeCount todo
	TimeRangeCount *int64 `json:"timeRangeCount,omitempty"`

	// TotalCount todo
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// FlowAggregatePairType defines model for flowAggregatePairType.
type FlowAggregatePairType string

// OperStatusType defines model for operStatusType.
type OperStatusType string

// PathID defines model for pathID.
type PathID = string

// GetAddressByID defines model for getAddressByID.
type GetAddressByID = AddressResponse

// GetAddresses defines model for getAddresses.
type GetAddresses = AddressListResponse

// GetConnectorByID defines model for getConnectorByID.
type GetConnectorByID = ConnectorResponse

// GetConnectors defines model for getConnectors.
type GetConnectors = ConnectorListResponse

// GetFlowAggregateByID defines model for getFlowAggregateByID.
type GetFlowAggregateByID = FlowAggregateResponse

// GetFlowAggregates defines model for getFlowAggregates.
type GetFlowAggregates = FlowAggregateListResponse

// GetLinkByID defines model for getLinkByID.
type GetLinkByID = LinkResponse

// GetLinks defines model for getLinks.
type GetLinks = LinkListResponse

// GetListenerByID defines model for getListenerByID.
type GetListenerByID = ListenerResponse

// GetListeners defines model for getListeners.
type GetListeners = ListenerListResponse

// GetProcessByID defines model for getProcessByID.
type GetProcessByID = ProcessResponse

// GetProcessGroupByID defines model for getProcessGroupByID.
type GetProcessGroupByID = ProcessGroupResponse

// GetProcessGroups defines model for getProcessGroups.
type GetProcessGroups = ProcessGroupListResponse

// GetProcesses defines model for getProcesses.
type GetProcesses = ProcessListResponse

// GetRouterAccess defines model for getRouterAccess.
type GetRouterAccess = RouterAccessListResponse

// GetRouterAccessByID defines model for getRouterAccessByID.
type GetRouterAccessByID = RouterAccessResponse

// GetRouterByID defines model for getRouterByID.
type GetRouterByID = RouterResponse

// GetRouterLinkByID defines model for getRouterLinkByID.
type GetRouterLinkByID = RouterLinkResponse

// GetRouterLinks defines model for getRouterLinks.
type GetRouterLinks = RouterLinkListResponse

// GetRouters defines model for getRouters.
type GetRouters = RouterListResponse

// GetSiteByID defines model for getSiteByID.
type GetSiteByID = SiteResponse

// GetSites defines model for getSites.
type GetSites = SiteListResponse

// GetTransportFlowByID defines model for getTransportFlowByID.
type GetTransportFlowByID = TransportFlowResponse

// GetTransportFlows defines model for getTransportFlows.
type GetTransportFlows = TransportFlowListResponse

// NotSupported defines model for notSupported.
type NotSupported = ErrorResponse

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1alpha1/addresses/)
	Addresses(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/addresses/{id}/)
	AddressByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/addresses/{id}/connectors/)
	ConnectorsByAddress(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/addresses/{id}/listeners/)
	ListenersByAddress(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/addresses/{id}/processes/)
	ProcessesByAddress(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/addresses/{id}/processpairs/)
	ProcessPairsByAddress(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/connectors/)
	Connectors(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/connectors/{id}/)
	ConnectorByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/hosts/)
	Hosts(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/hosts/{id}/)
	HostsByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/links/)
	Links(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/links/{id}/)
	LinkByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/listeners/)
	Listeners(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/listeners/{id}/)
	ListenerByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/listeners/{id}/flows)
	FlowsByListener(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processes/)
	Processes(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/processes/{id}/)
	ProcessById(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processes/{id}/addresses/)
	AddressesByProcess(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processes/{id}/connector/)
	ConnectorByProcess(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processgrouppairs/)
	Processgrouppairs(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/processgrouppairs/{id}/)
	ProcessgrouppairByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processgroups/)
	Processgroups(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/processgroups/{id}/)
	ProcessgroupByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processgroups/{id}/processes/)
	ProcessesByProcessGroup(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/processpairs/)
	Processpairs(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/processpairs/{id}/)
	ProcesspairByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routeraccess/)
	Routeraccess(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/routeraccess/{id}/)
	RouteraccessByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routerlinks/)
	Routerlinks(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/routerlinks/{id}/)
	RouterlinkByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routers/)
	Routers(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/routers/{id}/)
	RouterByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routers/{id}/connectors/)
	ConnectorsByRouter(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routers/{id}/flows/)
	FlowsByRouter(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routers/{id}/links/)
	LinksByRouter(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/routers/{id}/listeners/)
	ListenersByRouter(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sitepairs/)
	Sitepairs(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/sitepairs/{id}/)
	SitepairByID(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/)
	Sites(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/sites/{id}/)
	SiteById(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/{id}/flows/)
	FlowsBySite(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/{id}/hosts/)
	HostsBySite(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/{id}/links/)
	LinksBySite(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/{id}/processes/)
	ProcessesBySite(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/sites/{id}/routers/)
	RoutersBySite(w http.ResponseWriter, r *http.Request, id PathID)

	// (GET /api/v1alpha1/transportflows/)
	Transportflows(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1alpha1/transportflows/{id}/)
	TransportflowByID(w http.ResponseWriter, r *http.Request, id PathID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Addresses operation middleware
func (siw *ServerInterfaceWrapper) Addresses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Addresses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddressByID operation middleware
func (siw *ServerInterfaceWrapper) AddressByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddressByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectorsByAddress operation middleware
func (siw *ServerInterfaceWrapper) ConnectorsByAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectorsByAddress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListenersByAddress operation middleware
func (siw *ServerInterfaceWrapper) ListenersByAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListenersByAddress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessesByAddress operation middleware
func (siw *ServerInterfaceWrapper) ProcessesByAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessesByAddress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessPairsByAddress operation middleware
func (siw *ServerInterfaceWrapper) ProcessPairsByAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessPairsByAddress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Connectors operation middleware
func (siw *ServerInterfaceWrapper) Connectors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Connectors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectorByID operation middleware
func (siw *ServerInterfaceWrapper) ConnectorByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectorByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Hosts operation middleware
func (siw *ServerInterfaceWrapper) Hosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Hosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HostsByID operation middleware
func (siw *ServerInterfaceWrapper) HostsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HostsByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Links operation middleware
func (siw *ServerInterfaceWrapper) Links(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Links(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LinkByID operation middleware
func (siw *ServerInterfaceWrapper) LinkByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinkByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Listeners operation middleware
func (siw *ServerInterfaceWrapper) Listeners(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Listeners(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListenerByID operation middleware
func (siw *ServerInterfaceWrapper) ListenerByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListenerByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FlowsByListener operation middleware
func (siw *ServerInterfaceWrapper) FlowsByListener(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FlowsByListener(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Processes operation middleware
func (siw *ServerInterfaceWrapper) Processes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Processes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessById operation middleware
func (siw *ServerInterfaceWrapper) ProcessById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddressesByProcess operation middleware
func (siw *ServerInterfaceWrapper) AddressesByProcess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddressesByProcess(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectorByProcess operation middleware
func (siw *ServerInterfaceWrapper) ConnectorByProcess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectorByProcess(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Processgrouppairs operation middleware
func (siw *ServerInterfaceWrapper) Processgrouppairs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Processgrouppairs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessgrouppairByID operation middleware
func (siw *ServerInterfaceWrapper) ProcessgrouppairByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessgrouppairByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Processgroups operation middleware
func (siw *ServerInterfaceWrapper) Processgroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Processgroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessgroupByID operation middleware
func (siw *ServerInterfaceWrapper) ProcessgroupByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessgroupByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessesByProcessGroup operation middleware
func (siw *ServerInterfaceWrapper) ProcessesByProcessGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessesByProcessGroup(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Processpairs operation middleware
func (siw *ServerInterfaceWrapper) Processpairs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Processpairs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcesspairByID operation middleware
func (siw *ServerInterfaceWrapper) ProcesspairByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcesspairByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Routeraccess operation middleware
func (siw *ServerInterfaceWrapper) Routeraccess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Routeraccess(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RouteraccessByID operation middleware
func (siw *ServerInterfaceWrapper) RouteraccessByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RouteraccessByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Routerlinks operation middleware
func (siw *ServerInterfaceWrapper) Routerlinks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Routerlinks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RouterlinkByID operation middleware
func (siw *ServerInterfaceWrapper) RouterlinkByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RouterlinkByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Routers operation middleware
func (siw *ServerInterfaceWrapper) Routers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Routers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RouterByID operation middleware
func (siw *ServerInterfaceWrapper) RouterByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RouterByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectorsByRouter operation middleware
func (siw *ServerInterfaceWrapper) ConnectorsByRouter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectorsByRouter(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FlowsByRouter operation middleware
func (siw *ServerInterfaceWrapper) FlowsByRouter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FlowsByRouter(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LinksByRouter operation middleware
func (siw *ServerInterfaceWrapper) LinksByRouter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinksByRouter(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListenersByRouter operation middleware
func (siw *ServerInterfaceWrapper) ListenersByRouter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListenersByRouter(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Sitepairs operation middleware
func (siw *ServerInterfaceWrapper) Sitepairs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Sitepairs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SitepairByID operation middleware
func (siw *ServerInterfaceWrapper) SitepairByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SitepairByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Sites operation middleware
func (siw *ServerInterfaceWrapper) Sites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Sites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SiteById operation middleware
func (siw *ServerInterfaceWrapper) SiteById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SiteById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FlowsBySite operation middleware
func (siw *ServerInterfaceWrapper) FlowsBySite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FlowsBySite(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HostsBySite operation middleware
func (siw *ServerInterfaceWrapper) HostsBySite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HostsBySite(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LinksBySite operation middleware
func (siw *ServerInterfaceWrapper) LinksBySite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinksBySite(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessesBySite operation middleware
func (siw *ServerInterfaceWrapper) ProcessesBySite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessesBySite(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RoutersBySite operation middleware
func (siw *ServerInterfaceWrapper) RoutersBySite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RoutersBySite(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Transportflows operation middleware
func (siw *ServerInterfaceWrapper) Transportflows(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Transportflows(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransportflowByID operation middleware
func (siw *ServerInterfaceWrapper) TransportflowByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id PathID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransportflowByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/", wrapper.Addresses).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/{id}/", wrapper.AddressByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/{id}/connectors/", wrapper.ConnectorsByAddress).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/{id}/listeners/", wrapper.ListenersByAddress).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/{id}/processes/", wrapper.ProcessesByAddress).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/addresses/{id}/processpairs/", wrapper.ProcessPairsByAddress).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/connectors/", wrapper.Connectors).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/connectors/{id}/", wrapper.ConnectorByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/hosts/", wrapper.Hosts).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/hosts/{id}/", wrapper.HostsByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/links/", wrapper.Links).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/links/{id}/", wrapper.LinkByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/listeners/", wrapper.Listeners).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/listeners/{id}/", wrapper.ListenerByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/listeners/{id}/flows", wrapper.FlowsByListener).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processes/", wrapper.Processes).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processes/{id}/", wrapper.ProcessById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processes/{id}/addresses/", wrapper.AddressesByProcess).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processes/{id}/connector/", wrapper.ConnectorByProcess).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processgrouppairs/", wrapper.Processgrouppairs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processgrouppairs/{id}/", wrapper.ProcessgrouppairByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processgroups/", wrapper.Processgroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processgroups/{id}/", wrapper.ProcessgroupByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processgroups/{id}/processes/", wrapper.ProcessesByProcessGroup).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processpairs/", wrapper.Processpairs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/processpairs/{id}/", wrapper.ProcesspairByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routeraccess/", wrapper.Routeraccess).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routeraccess/{id}/", wrapper.RouteraccessByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routerlinks/", wrapper.Routerlinks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routerlinks/{id}/", wrapper.RouterlinkByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/", wrapper.Routers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/{id}/", wrapper.RouterByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/{id}/connectors/", wrapper.ConnectorsByRouter).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/{id}/flows/", wrapper.FlowsByRouter).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/{id}/links/", wrapper.LinksByRouter).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/routers/{id}/listeners/", wrapper.ListenersByRouter).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sitepairs/", wrapper.Sitepairs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sitepairs/{id}/", wrapper.SitepairByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/", wrapper.Sites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/", wrapper.SiteById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/flows/", wrapper.FlowsBySite).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/hosts/", wrapper.HostsBySite).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/links/", wrapper.LinksBySite).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/processes/", wrapper.ProcessesBySite).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/sites/{id}/routers/", wrapper.RoutersBySite).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/transportflows/", wrapper.Transportflows).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1alpha1/transportflows/{id}/", wrapper.TransportflowByID).Methods("GET")

	return r
}
